// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
//using Microsoft.AspNetCore.Identity;
//using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Sakan.Domain.Models;

namespace Sakan.Infrastructure.MyContext;

public partial class sakanContext : DbContext
{
    public sakanContext(DbContextOptions<sakanContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Amenity> Amenities { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Bed> Beds { get; set; }

    public virtual DbSet<BedPhoto> BedPhotos { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingRequest> BookingRequests { get; set; }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<Favorite> Favorites { get; set; }

    public virtual DbSet<Listing> Listings { get; set; }

    public virtual DbSet<ListingPhoto> ListingPhotos { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<RoomPhoto> RoomPhotos { get; set; }

    public virtual DbSet<SupportTicket> SupportTickets { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<TicketReply> TicketReplies { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Amenity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Amenitie__3214EC07E2E91D51");
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<Bed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Beds__3214EC071B8CAC29");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsAvailable).HasDefaultValue(true);

            entity.HasOne(d => d.OccupiedByUser).WithMany(p => p.Beds).HasConstraintName("FK__Beds__OccupiedBy__0A9D95DB");

            entity.HasOne(d => d.Room).WithMany(p => p.Beds).HasConstraintName("FK__Beds__RoomId__08B54D69");
        });

        modelBuilder.Entity<BedPhoto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BedPhoto__3214EC0775C4C75B");

            entity.HasOne(d => d.Bed).WithMany(p => p.BedPhotos).HasConstraintName("FK__BedPhotos__BedId__2180FB33");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Bookings__3214EC075C6F19C3");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Bed).WithMany(p => p.Bookings).HasConstraintName("FK__Bookings__BedId__10566F31");

            entity.HasOne(d => d.Guest).WithMany(p => p.Bookings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__GuestI__0D7A0286");

            entity.HasOne(d => d.Listing).WithMany(p => p.Bookings).HasConstraintName("FK__Bookings__Listin__0E6E26BF");

            entity.HasOne(d => d.Room).WithMany(p => p.Bookings).HasConstraintName("FK__Bookings__RoomId__0F624AF8");
        });

        modelBuilder.Entity<BookingRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BookingR__3214EC078CA25B7B");

            entity.Property(e => e.GuestApproved).HasDefaultValue(false);
            entity.Property(e => e.HostApproved).HasDefaultValue(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Bed).WithMany(p => p.BookingRequests).HasConstraintName("FK__BookingRe__BedId__17036CC0");

            entity.HasOne(d => d.Guest).WithMany(p => p.BookingRequests).HasConstraintName("FK__BookingRe__Guest__14270015");

            entity.HasOne(d => d.Listing).WithMany(p => p.BookingRequests).HasConstraintName("FK__BookingRe__Listi__151B244E");

            entity.HasOne(d => d.Room).WithMany(p => p.BookingRequests).HasConstraintName("FK__BookingRe__RoomI__160F4887");
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.ChatId).HasName("PK__Chats__A9FBE7C65D74D977");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Listing).WithMany(p => p.Chats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Chats__ListingId__540C7B00");
        });

        modelBuilder.Entity<Favorite>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ListingId }).HasName("PK__Favorite__0C7B27A18B893413");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Listing).WithMany(p => p.Favorites).HasConstraintName("FK_Favorites_Listings");

            entity.HasOne(d => d.User).WithMany(p => p.Favorites).HasConstraintName("FK_Favorites_AspNetUsers");
        });

        modelBuilder.Entity<Listing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Listings__3214EC0789E080BA");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.IsBookableAsWhole).HasDefaultValue(true);

            entity.HasOne(d => d.Host).WithMany(p => p.Listings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Listings__HostId__7F2BE32F");

            entity.HasMany(d => d.Amenities).WithMany(p => p.Listings)
                .UsingEntity<Dictionary<string, object>>(
                    "ListingAmenity",
                    r => r.HasOne<Amenity>().WithMany()
                        .HasForeignKey("AmenityId")
                        .HasConstraintName("FK_ListingAmenities_Amenities"),
                    l => l.HasOne<Listing>().WithMany()
                        .HasForeignKey("ListingId")
                        .HasConstraintName("FK_ListingAmenities_Listings"),
                    j =>
                    {
                        j.HasKey("ListingId", "AmenityId").HasName("PK__ListingA__177C11808CFF318D");
                        j.ToTable("ListingAmenities");
                    });
        });

        modelBuilder.Entity<ListingPhoto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ListingP__3214EC075FDABF87");

            entity.HasOne(d => d.Listing).WithMany(p => p.ListingPhotos).HasConstraintName("FK__ListingPh__Listi__1BC821DD");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageID).HasName("PK__Messages__C87C037C52C1C551");

            entity.Property(e => e.Timestamp).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Chat).WithMany(p => p.Messages).HasConstraintName("FK_Messages_Chat");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MessageReceivers).HasConstraintName("FK__Messages__Receiv__395884C4");

            entity.HasOne(d => d.Sender).WithMany(p => p.MessageSenders).HasConstraintName("FK__Messages__Sender__3864608B");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3214EC079AAC318F");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications).HasConstraintName("FK_Notifications_AspNetUsers");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentID).HasName("PK__Payments__9B556A58F9AA6902");

            entity.Property(e => e.Currency).HasDefaultValue("usd");
            entity.Property(e => e.Method).HasDefaultValue("Stripe");

            entity.HasOne(d => d.Booking).WithMany(p => p.Payments).HasConstraintName("FK__Payments__Bookin__2A164134");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewID).HasName("PK__Reviews__74BC79AE8B85C912");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Booking).WithMany(p => p.Reviews).HasConstraintName("FK_Reviews_Bookings");

            entity.HasOne(d => d.ReviewedUser).WithMany(p => p.ReviewReviewedUsers).HasConstraintName("FK__Reviews__Reviewe__3E1D39E1");

            entity.HasOne(d => d.Reviewer).WithMany(p => p.ReviewReviewers).HasConstraintName("FK__Reviews__Reviewe__3D2915A8");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Rooms__3214EC07FEFC7CA8");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsBookableAsWhole).HasDefaultValue(true);

            entity.HasOne(d => d.Listing).WithMany(p => p.Rooms).HasConstraintName("FK__Rooms__ListingId__04E4BC85");
        });

        modelBuilder.Entity<RoomPhoto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RoomPhot__3214EC07C35A5E4D");

            entity.HasOne(d => d.Room).WithMany(p => p.RoomPhotos).HasConstraintName("FK__RoomPhoto__RoomI__1EA48E88");
        });

        modelBuilder.Entity<SupportTicket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SupportT__3214EC07700DED93");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Priority).HasDefaultValue("Normal");
            entity.Property(e => e.Status).HasDefaultValue("Open");

            entity.HasOne(d => d.Booking).WithMany(p => p.SupportTickets)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SupportTickets_Bookings");

            entity.HasOne(d => d.User).WithMany(p => p.SupportTickets)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SupportTickets_AspNetUsers");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Test__3213E83F68BC99D2");
        });

        modelBuilder.Entity<TicketReply>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TicketRe__3214EC075DD0A917");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getutcdate())");

            entity.HasOne(d => d.Author).WithMany(p => p.TicketReplies).HasConstraintName("FK_TicketReplies_AspNetUsers");

            entity.HasOne(d => d.SupportTicket).WithMany(p => p.TicketReplies).HasConstraintName("FK_TicketReplies_SupportTickets");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}